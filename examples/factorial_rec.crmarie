*

function mult a b
counter=0
*
{
    %beg, clear
    .if(EQ b 0) 
    {
        .ret(counter)
    }
    .else
    {
        b=sub (b 1)
        counter=add (counter a)     
        %jump beg
    }

}

function stack_fact
val=0
temp=0
inner=0
*
{
    val=pop()
    
    .if(EQ val 0)
    {
        stack_return(1)
    }
    .else
    {
        push (val)

        temp = sub (val 1)

        push (-back_ptr)  
        push (temp) 

        stack_fact()
        .flag(back_ptr)
        inner := return

        val = pop()
        temp = mult(inner val)

        stack_return(temp)
              
    }


}

function main
temp=0
ptr=0
inp=0
*
{


    push(-back_ptr)
    inp=input()
    push(inp)
    stack_fact()
    .flag(back_ptr)
    
    %output

}   